<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Guava使用（二）哈希</title>
      <link href="/2020/01/16/guava-shi-yong-er-zhi-hash/"/>
      <url>/2020/01/16/guava-shi-yong-er-zhi-hash/</url>
      
        <content type="html"><![CDATA[<h1 id="Guava包为什么要提供hash"><a href="#Guava包为什么要提供hash" class="headerlink" title="Guava包为什么要提供hash"></a>Guava包为什么要提供hash</h1><p>java内置的hashcode算法被限制为32位的，而且算法与数据之间耦合严重，无法进行算法的替换。虽然JDK内置的hashcode算法快，但是碰撞严重<br>在简单的散列表中可以通过再hash解决这个问题，但是guava官方认为在其它情况无法满足需求。</p><h1 id="HashFunction"><a href="#HashFunction" class="headerlink" title="HashFunction"></a>HashFunction</h1><p>HashFunction是一个纯无状态函数，它将任意数据块映射到固定数量的位，其属性是相等的输入始终产生相等的输出，而不相等的输入则尽可能频繁地产生不相等的输出。<br>示例：常用的hash算法</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 计算MD5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Hashing<span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashBytes</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Hashing<span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashString</span><span class="token punctuation">(</span><span class="token string">"hello, world"</span><span class="token punctuation">,</span>Charsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算sha256</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Hashing<span class="token punctuation">.</span><span class="token function">sha256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashBytes</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算sha512</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Hashing<span class="token punctuation">.</span><span class="token function">sha512</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashBytes</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算crc32</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Hashing<span class="token punctuation">.</span><span class="token function">crc32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashBytes</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Hasher"><a href="#Hasher" class="headerlink" title="Hasher"></a>Hasher</h1><p>可以向HashFunction请求有状态的哈希器，该哈希器提供流利的语法以将数据添加到哈希中，然后检索哈希值。哈希器可以接受任何原始输入，字节数组，字节数组的片段，字符序列，某些字符集中的字符序列等，<strong>或任何其他带有适当漏斗的对象</strong><br>示例：</p><pre class=" language-java"><code class="language-java">Funnel<span class="token operator">&lt;</span>Person<span class="token operator">></span> personFunnel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Funnel</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">funnel</span><span class="token punctuation">(</span>Person person<span class="token punctuation">,</span> PrimitiveSink into<span class="token punctuation">)</span> <span class="token punctuation">{</span>                into                        <span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>id<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> Charsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>lastName<span class="token punctuation">,</span> Charsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>birthYear<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>HashFunction hf <span class="token operator">=</span> Hashing<span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashCode hc <span class="token operator">=</span> hf<span class="token punctuation">.</span><span class="token function">newHasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>11L<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"www"</span><span class="token punctuation">,</span> Charsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> personFunnel<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Funnel"><a href="#Funnel" class="headerlink" title="Funnel"></a>Funnel</h1><p>漏斗描述了对象如何Hash</p><pre class=" language-java"><code class="language-java">Funnel<span class="token operator">&lt;</span>Person<span class="token operator">></span> personFunnel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Funnel</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">funnel</span><span class="token punctuation">(</span>Person person<span class="token punctuation">,</span> PrimitiveSink into<span class="token punctuation">)</span> <span class="token punctuation">{</span>        into            <span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>id<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> Charsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>lastName<span class="token punctuation">,</span> Charsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>birthYear<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="BloomFilter-布隆过滤器"><a href="#BloomFilter-布隆过滤器" class="headerlink" title="BloomFilter  布隆过滤器"></a>BloomFilter  布隆过滤器</h1><p>作用：布隆过滤器是一种概率数据结构，你可以测试对象是否绝对不在过滤器中，或者可能已添加到布隆过滤器中。<br>使用布隆过滤器，你需要实现Funnel漏斗，以便将你的对象拆解位原始类型</p><h2 id="布隆过滤器大小该如何设定？"><a href="#布隆过滤器大小该如何设定？" class="headerlink" title="布隆过滤器大小该如何设定？"></a>布隆过滤器大小该如何设定？</h2><p>较大的滤波器将具有较少的误报，而较小的将为零。<br>估算误报率的公式是：<img src="https://img-blog.csdnimg.cn/20200116121449639.png" alt="(1-e-kn/m)k">  因此，你得首先确定你期望插入的数据大小n，然后尝试不同的k,m值</p><h2 id="布隆过滤器hash函数的个数如何设置？"><a href="#布隆过滤器hash函数的个数如何设置？" class="headerlink" title="布隆过滤器hash函数的个数如何设置？"></a>布隆过滤器hash函数的个数如何设置？</h2><p>hash函数设置的越多，过滤器就越慢，同时会越快被填满。如果设置的太少，又会遇到很多误报。<br>因此，首先确定n的值，通过公式确定k的值 k = (m/n)ln(2)^2</p><h2 id="布隆过滤的hash函数改如何选择？"><a href="#布隆过滤的hash函数改如何选择？" class="headerlink" title="布隆过滤的hash函数改如何选择？"></a>布隆过滤的hash函数改如何选择？</h2><ul><li>Chromium uses HashMix. (also, here’s a short description of how they use bloom filters)</li><li>python-bloomfilter uses cryptographic hashes</li><li>Plan9 uses a simple hash as proposed in Mitzenmacher 2005</li><li>Sdroege Bloom filter uses fnv1a (included just because I wanted to show one that uses fnv.)</li><li>Squid uses MD5</li></ul><h2 id="布隆过滤器的速度和空间效率"><a href="#布隆过滤器的速度和空间效率" class="headerlink" title="布隆过滤器的速度和空间效率"></a>布隆过滤器的速度和空间效率</h2><p>set操作和测试元素是否在过滤器中的时间复杂度都是O（k）,取决与hash函数的个数<br>空间复杂度，取决与你能忍受的错误率以及你插入的数据潜在个数。如果数量有限，Vector表现更好，如果你不能估算潜在的插入个数，那么最好使用哈希表或可伸缩的Bloom过滤器</p><h2 id="guava包怎么使用布隆过滤器"><a href="#guava包怎么使用布隆过滤器" class="headerlink" title="guava包怎么使用布隆过滤器"></a>guava包怎么使用布隆过滤器</h2><p>示例代码</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBloomFilter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义漏斗，拆解对象</span>        Funnel<span class="token operator">&lt;</span>Person<span class="token operator">></span> personFunnel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Funnel</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">funnel</span><span class="token punctuation">(</span>Person person<span class="token punctuation">,</span> PrimitiveSink into<span class="token punctuation">)</span> <span class="token punctuation">{</span>                into                        <span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>id<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> Charsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>lastName<span class="token punctuation">,</span> Charsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>birthYear<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">birthYear</span><span class="token punctuation">(</span><span class="token number">1995</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">firstName</span><span class="token punctuation">(</span><span class="token string">"Zhou"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">lastName</span><span class="token punctuation">(</span><span class="token string">"Evan"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 期望插入的expectedInsertions 大小</span>        BloomFilter<span class="token operator">&lt;</span>Person<span class="token operator">></span> bloomFilter <span class="token operator">=</span> BloomFilter<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>personFunnel<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断person是否包含在布隆过滤器中 </span>        <span class="token comment" spellcheck="true">//,如果返回false 那么就是一定不存在，如果返回True，可能存在</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> bloomFilter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false </span>        bloomFilter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> bloomFilter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span></code></pre><p>ps：<br><strong>我们并没有指布隆过滤器大小，以及hash函数的个数，那么guava内部是怎么做的呢？</strong><br>内部有这两个函数，来参数化过滤器大小，和hash函数的个数，函数的实现就是我们上面提到的公式的体现。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 计算布隆过滤器大小</span>    <span class="token keyword">long</span> numBits <span class="token operator">=</span> <span class="token function">optimalNumOfBits</span><span class="token punctuation">(</span>expectedInsertions<span class="token punctuation">,</span> fpp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算hash函数的个数</span>    <span class="token keyword">int</span> numHashFunctions <span class="token operator">=</span> <span class="token function">optimalNumOfHashFunctions</span><span class="token punctuation">(</span>expectedInsertions<span class="token punctuation">,</span> numBits<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">optimalNumOfBits</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      p <span class="token operator">=</span> Double<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span>n <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">optimalNumOfHashFunctions</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">long</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// (m / n) * log(2), but avoid truncation due to division!</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> m <span class="token operator">/</span> n <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Guava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Guava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Guava使用（一）Strings扩展</title>
      <link href="/2020/01/14/guava-shi-yong-yi-string-kuo-zhan/"/>
      <url>/2020/01/14/guava-shi-yong-yi-string-kuo-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="Joiner"><a href="#Joiner" class="headerlink" title="Joiner"></a>Joiner</h1><p>字符串连接</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 跳过空值</span> String skipNulls <span class="token operator">=</span> Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">skipNulls</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>skipNulls<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//张三,李四,王五</span>        String useNUll <span class="token operator">=</span> Joiner                <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">useForNull</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//空替换</span>                <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>useNUll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//张三,null,李四,王五</span></code></pre><h1 id="Splitter"><a href="#Splitter" class="headerlink" title="Splitter"></a>Splitter</h1><p>作用：字符串分隔<br>原因：JDK自带的split()函数，会默认忽略尾部的分隔符，StringTokenizer 会用五个空字符代替。</p><pre class=" language-java"><code class="language-java"> String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> <span class="token string">",a,,b,"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "", "a", "", "b"</span></code></pre><pre class=" language-java"><code class="language-java">Iterable<span class="token operator">&lt;</span>String<span class="token operator">></span> split1 <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"foo,bar,,   qux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>split1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[foo, bar, qux]</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 任意字符进行拆分</span>Iterable<span class="token operator">&lt;</span>String<span class="token operator">></span> split1 <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token string">",;."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"foo,bar,,   qux;23.,s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><table><thead><tr><th>API</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>Splitter.on(char)</td><td></td><td>Splitter.on(‘;’)</td></tr><tr><td>Splitter.on(CharMatcher)</td><td>以任意字符进行拆分</td><td>Splitter.on(CharMatcher.BREAKING_WHITESPACE) Splitter.on(CharMatcher.anyOf(“;,.”))</td></tr><tr><td>Splitter.on(String)</td><td></td><td>Splitter.on(“, “)</td></tr><tr><td>Splitter.on(Pattern)</td><td></td><td></td></tr><tr><td>Splitter.onPattern(String)</td><td></td><td>Splitter.onPattern(“\r?\n”)</td></tr><tr><td>Splitter.fixedLength(int)</td><td></td><td>Splitter.fixedLength(3)</td></tr></tbody></table><table><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>omitEmptyStrings()</td><td>Automatically omits empty strings from theresult.</td><td>Splitter.on(‘,’).omitEmptyStrings().split(“a,,c,d”)returns “a”, “c”, “d”</td></tr><tr><td>trimResults()</td><td>Trims whitespace from the results; equivalent to trimResults(CharMatcher.WHITESPACE).</td><td>Splitter.on(‘,’).trimResults().split(“a, b, c, d”) returns “a”, “b”, “c”, “d”</td></tr><tr><td>trimResults(CharMatcher)</td><td>Trims characters matching the specified CharMatcher from results.</td><td>Splitter.on(‘,’).trimResults(CharMatcher.is(‘<em>‘)).split(“_a ,_b</em> ,c__”) returns “a “, “b_ “, “c”.</td></tr><tr><td>limit(int)</td><td>Stops splitting after the specified number of strings have beenreturned.</td><td>Splitter.on(‘,’).limit(3).split(“a,b,c,d”) returns “a”, “b”, “c,d”</td></tr></tbody></table><h2 id="其它split方法"><a href="#其它split方法" class="headerlink" title="其它split方法"></a>其它split方法</h2><ul><li>splitToList</li><li>splitToStream</li></ul><h1 id="CharMatcher"><a href="#CharMatcher" class="headerlink" title="CharMatcher"></a>CharMatcher</h1><p>提供了字符串替换等操作<br> CharMatcher.is(‘a’).replaceFrom(“yaha”, “oo”) // return yoohoo<br> 如果要调用的字符串只有一个字符，最好直接使用 replaceFrom(CharSequence, char)</p><h1 id="Charsets"><a href="#Charsets" class="headerlink" title="Charsets"></a>Charsets</h1><pre class=" language-java"><code class="language-java">    bytes <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>Charsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="CaseFormat"><a href="#CaseFormat" class="headerlink" title="CaseFormat"></a>CaseFormat</h1><p>字符格式化</p><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCaseFormat</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//       小驼峰 constantName</span>        CaseFormat<span class="token punctuation">.</span>UPPER_UNDERSCORE<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>CaseFormat<span class="token punctuation">.</span>LOWER_CAMEL<span class="token punctuation">,</span> <span class="token string">"CONSTANT_NAME"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        连接 constant-name</span>        CaseFormat<span class="token punctuation">.</span>UPPER_UNDERSCORE<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>CaseFormat<span class="token punctuation">.</span>LOWER_HYPHEN<span class="token punctuation">,</span> <span class="token string">"CONSTANT_NAME"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//         constant_name</span>        CaseFormat<span class="token punctuation">.</span>UPPER_UNDERSCORE<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>CaseFormat<span class="token punctuation">.</span>LOWER_UNDERSCORE<span class="token punctuation">,</span> <span class="token string">"CONSTANT_NAME"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//           大驼峰 ConstantName</span>        CaseFormat<span class="token punctuation">.</span>UPPER_UNDERSCORE<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>CaseFormat<span class="token punctuation">.</span>UPPER_CAMEL<span class="token punctuation">,</span> <span class="token string">"CONSTANT_NAME"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//          CONSTANT_NAME</span>        CaseFormat<span class="token punctuation">.</span>UPPER_UNDERSCORE<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>CaseFormat<span class="token punctuation">.</span>UPPER_UNDERSCORE<span class="token punctuation">,</span> <span class="token string">"CONSTANT_NAME"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Guava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Guava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整合shiro问题--数据库事务失效</title>
      <link href="/2019/12/29/springboot-zheng-he-shiro-wen-ti-shu-ju-ku-shi-wu-shi-xiao/"/>
      <url>/2019/12/29/springboot-zheng-he-shiro-wen-ti-shu-ju-ku-shi-wu-shi-xiao/</url>
      
        <content type="html"><![CDATA[<h2 id="spring事务管理"><a href="#spring事务管理" class="headerlink" title="spring事务管理"></a>spring事务管理</h2><p>spring事务管理支持两种类型。一种是编程式的事务类型，另外一种是声明式的事务类型。但是无论哪一种底层都采用spring事务管理器进行统一管理。<br>spring事务管理介绍我之前写的还算比较详细：<a href="https://blog.csdn.net/qq_36719449/article/details/83614701" target="_blank" rel="noopener">spring事务管理介绍</a></p><h2 id="spring事务失效的原因"><a href="#spring事务失效的原因" class="headerlink" title="spring事务失效的原因"></a>spring事务失效的原因</h2><ul><li>没有开启事务 @EnableTransactionManagement （如果使用springboot会自动配置开启该注解，注册事务管理器和事务增强器）</li><li>异常类型不对，spring事务默认只对RuntimeException进行回滚。</li><li>只能在作用在public方法上（SpringAOP基于代理的局限性）</li><li>子线程中无法使用事务，也就是你自己new出来的线程，异步执行的任务无法使用事务。</li><li>通过this调用当前类的方法。因为this调用是真实对象，并不是通过代理对象调用。例如：如果是一个不带事务的方法调用该类的带事务的方法，直接通过this.xxx()调用，而不生成代理事务。</li><li>…<br><strong>总结就是一句话：既然spring事务依赖于动态代理，那么事务能否失效，就开是否生成了代理对象。</strong></li></ul><h2 id="springboot-整合shiro-事务失效"><a href="#springboot-整合shiro-事务失效" class="headerlink" title="springboot 整合shiro 事务失效"></a>springboot 整合shiro 事务失效</h2><p>如果你的项目整合了shiro，那么注意观察启动日志是否打印了类似于这样的语句：</p><pre><code> Bean &#39;sysUser&#39; of type [com.sun.proxy.$Proxy87] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</code></pre><p>这句话的意思就是SysUser对象被提前初始化了，不会被spring后置处理器拦截处理，导致出现问题，例如不能够被自动代理。<br>如果你看明白了这句话，我想也大概明白了整合shiro时候为什么事务会失效了，因为spring事务依赖于AOP代理技术实现。</p><p>整合Shiro时候，你在自定义的Realm中自动注入了UserService，UserService在这里被提前初始化了，所以事务失效了。</p><p>具体原因：ShiroFilterFactoryBean实现了后置处理器接口，在加载bean后置处理器前会加载Configuration配置类，导致ShiroFactoryBean被初始化了，也就是在这里提前实例化了相关的bean。</p><p>ShiroFilterFactoryBean -&gt; SecurityManager -&gt; Realm实现类 -&gt; UserService</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在自定义Realm的中注入UserService时候，使用懒加载@Lazy。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Lazy</span>    <span class="token keyword">private</span> SysUserService userService<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
            <tag> spring事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web应用认证概述</title>
      <link href="/2019/12/19/web-ying-yong-ren-zheng-gai-shu/"/>
      <url>/2019/12/19/web-ying-yong-ren-zheng-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-常见的认证方式"><a href="#1-常见的认证方式" class="headerlink" title="1 常见的认证方式"></a>1 常见的认证方式</h1><h2 id="1-1-Http-Basic-Auth"><a href="#1-1-Http-Basic-Auth" class="headerlink" title="1.1 Http Basic Auth"></a>1.1 Http Basic Auth</h2><p>每次请求都提供用户的用户名和密码。简单说 Basic Auth是配合Restful API 使用的最简单的认证方式，只需提供用户名密码即可，但是存在把用户名暴露给第三方客户端的风险，再生产环境中避免使用。</p><h2 id="1-2-Cookie-Auth"><a href="#1-2-Cookie-Auth" class="headerlink" title="1.2 Cookie Auth"></a>1.2 Cookie Auth</h2><p>Cookie认证机制就是为一次请求认证在服务端创建一个session对象，同时在客户端创建一个cookie对象，通过客户端提交的cookie对象与服务端的session对象匹配来实现状态的管理，默认的，当我们关闭浏览器的时候，cookie会被删除，但是可以通过修改cookie的过期时间在一定时间内有效。<br><strong>弊端</strong>：</p><ul><li>某些移动端可能不存在cookie（比如微信小程序）</li><li>cookie存在跨域问题（在微服务之间端口不一样，或存在跨域问题。）<h2 id="1-3-OAuth"><a href="#1-3-OAuth" class="headerlink" title="1.3 OAuth"></a>1.3 OAuth</h2>OAuth（开放授权）是一个开放的授权标准，允许第三方应用访问在某一web服务器上存储的私密资源，而无需将用户名和密码提供给第三方软件。OAuth允许用户提供一个令牌，每一个令牌授权一个特定的第三方系统，通过这个令牌访问存在特定服务器上的资源。<br><img src="https://img-blog.csdnimg.cn/2019121519130361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzE5NDQ5,size_16,color_FFFFFF,t_70" alt="OAuth协议认证流程"><h2 id="1-4-Token-Auth"><a href="#1-4-Token-Auth" class="headerlink" title="1.4 Token Auth"></a>1.4 Token Auth</h2>Http Basic Auth的演化版本，每次请求服务端带上token标志，后台服务校验这个token是否合法，从而决定客户端是否可以访问后台资源。无状态</li></ul><p><strong>基于Token Auth的好处</strong></p><ul><li>支持跨域访问：cookie不允许跨域访问，token不存在这个问题。一般将token信息设置在http请求头里</li><li>无状态，服务端可自行扩展，token机制在服务端不需要存储session，因而无需解决session共享问题。</li><li>更适合用CDN：跨域通过内容分发网络请求你服务端的所有资料，你的服务端只需要提供API即可</li><li>去耦：不需要绑定一个特定的身份认证方案</li><li>更适合原生应用：当你的客户端是一个原生平台（IOS,Android，Window8），cookie不被支持，你需要通过cookie容器解决</li><li>CSRF： 因为不在依赖cookie，所以不需要考虑跨站请求伪造问题。</li><li>可以做到标准化，例如jwt（json web token） </li></ul><h1 id="2-有状态服务和无状态服务"><a href="#2-有状态服务和无状态服务" class="headerlink" title="2 有状态服务和无状态服务"></a>2 有状态服务和无状态服务</h1><h2 id="2-1-有状态服务"><a href="#2-1-有状态服务" class="headerlink" title="2.1 有状态服务"></a>2.1 有状态服务</h2><p>有状态服务：服务端会存储请求上下文相关的数据，先后的请求可能是有关联的。例如，传统web应用中，使用session维护已登录用户的数据。客户端（浏览器）存储jsession数据，在提交请求后，找到次jsessionid 对应的session数据。虽然http是无状态的，但是借助session可以使http服务装换为有状态的。</p><h2 id="2-2-无状态服务"><a href="#2-2-无状态服务" class="headerlink" title="2.2 无状态服务"></a>2.2 无状态服务</h2><p>无状态服务：本次请求不依赖于之前的请求，本次请求的数据全部包含在该次请求中。例如，基于token的验证方式，不需要sesession维持会话数据。</p>]]></content>
      
      
      <categories>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro基础</title>
      <link href="/2019/12/19/shiro-ji-chu/"/>
      <url>/2019/12/19/shiro-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="shiro-架构"><a href="#shiro-架构" class="headerlink" title="shiro 架构"></a>shiro 架构</h2><p><img src="https://img-blog.csdnimg.cn/20191218075651708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzE5NDQ5,size_16,color_FFFFFF,t_70" alt="shiro架构图"></p><ul><li>Authentication: 身份认证/登录，是一个可扩展点，可以自定义实现；可以使用认证 策略（Authentication Strategy），即什么情况下算用户认证通过了； </li><li>Authorization: 权限验证，决定用户有什么样的访问权限。</li><li>Session Management: 用户session管理，支持非 web环境以及EJB。</li><li>Cryptography: 加密，保证数据安全性。</li><li>Web Support：Web 支持，可以非常容易的集成到Web 环境</li><li>Caching：缓存，例如，可缓存用户session，用户信息,拥有的角色，权限信息</li><li>Concurrency：Shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能 把权限自动传播过去</li><li>Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问； </li><li>Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了</li></ul><h2 id="shiro-概述"><a href="#shiro-概述" class="headerlink" title="shiro 概述"></a>shiro 概述</h2><p><img src="https://img-blog.csdnimg.cn/20191218080347940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzE5NDQ5,size_16,color_FFFFFF,t_70" alt="shiro外观图"></p><ul><li>Subject: 与当前应用程序交互的“用户”。“Subject”可以是一个人，但它也可以表示第三方服务，守护程序帐户，定时任务或类似的东西-基本上是当前与该软件交互的任何东西。Subject  只是一个接口，当与 SecurityManager交互时，会转换为具体的subject。</li><li>SecurityManager:  SecurityManager shiro的核心，管理协调其内部组件，程序员一般不用理会，并且应用程序开发人员几乎所有时间都花在Subject API上。</li><li>Realms: realm是你的应用和shiro之间桥梁，当需要执行身份验证（登录）和授权（访问控制）时，Shiro会从一个或多个为应用程序配置的realm中查找数据内容。<table><thead><tr><th>xxx</th><th>算算算</th></tr></thead><tbody><tr><td>s</td><td>ss</td></tr></tbody></table></li></ul><h2 id="shiro中默认的过滤器"><a href="#shiro中默认的过滤器" class="headerlink" title="shiro中默认的过滤器"></a>shiro中默认的过滤器</h2><p>如下的拦截器 都在DefaultFilter 枚举类中有说明</p><table><thead><tr><th>过滤器名称</th><th>过滤</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>anon</td><td>AnonymousFilter</td><td>不需要登录的路径</td><td>/user/signup/** = anon</td></tr><tr><td>authc</td><td>FormAuthenticationFilter</td><td>用户认证（登录）拦截器，如果验证不通过跳转到你配置的登录页面。主要属性：usernameParam：表单提交的用户名参数名  passwordParam:表单提交的密码参数名 loginUrl：登录页面地址 successUrl：登录成功后的跳转页面failureKeyAttribute 登录失败错误信息存储key</td><td></td></tr><tr><td>authcBasic</td><td>BasicHttpAuthenticationFilter</td><td>Basic Http 身份拦截器 主要属性：applicationName：弹出登录框显示的信息</td><td></td></tr><tr><td>logout</td><td>LogoutFilter</td><td>退出拦截器 主要属性：redirectUrl：退出成功后重定向的地址</td><td></td></tr><tr><td>noSessionCreation</td><td>NoSessionCreationFilter</td><td>阻止在请求期间创建新的会话，保证无状态。</td><td></td></tr><tr><td>perms</td><td>PermissionsAuthorizationFilter</td><td>权限授权拦截器，验证用户是否拥有权限</td><td>例子：/user/** = perms[“user:create”]</td></tr><tr><td>port</td><td>PortFilter</td><td>端口拦截器</td><td></td></tr><tr><td>rest</td><td>HttpMethodPermissionFilter</td><td>rest 风格拦截器，根据请求的HttpMethod[POST、GET、Delete]进行拦截</td><td></td></tr><tr><td>roles</td><td>RolesAuthorizationFilter</td><td>角色授权拦截器，验证用户是否拥有所选角色</td><td></td></tr><tr><td>ssl</td><td>SslFilter</td><td>ssl拦截器 只有请求协议是https的才能通过，否则自动跳转到https端口</td><td></td></tr><tr><td>user</td><td>UserFilter</td><td>用户拦截器，用户已经身份认证/记住我的登录的都可以拦截</td><td></td></tr></tbody></table><p>web环境下 默认过滤器初始化的地方 DefaultFilterChainManager</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addDefaultFilters</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> init<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>DefaultFilter defaultFilter <span class="token operator">:</span> DefaultFilter<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">addFilter</span><span class="token punctuation">(</span>defaultFilter<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultFilter<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> init<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="shiro权限校验"><a href="#shiro权限校验" class="headerlink" title="shiro权限校验"></a>shiro权限校验</h2><ul><li>使用perms 拦截器，对路径进行拦截，判断当前用户是否有权限</li><li>使用shiro 注解的形式</li><li>在页面使用shiro标签</li></ul><h2 id="shiro-permission-匹配规则"><a href="#shiro-permission-匹配规则" class="headerlink" title="shiro permission 匹配规则"></a>shiro permission 匹配规则</h2><p>– 这种情况通常会使用三个部件：域、操作、被付诸实施的实例。如：user:edit:manager<br>– 也可以使用通配符来定义，如：user:edit:<em>、user:</em>:<em>、user:</em>:manager<br>– 部分省略通配符：缺少的部件意味着用户可以访问所有与之匹配的值，比如：user:edit 等价于 user:edit :<em>、user 等价于 user:</em>:*<br>– 注意：通配符只能从字符串的结尾处省略部件，也就<br>是说 user:edit 并不等价于 user:*:edit</p><h1 id="shiro-依赖"><a href="#shiro-依赖" class="headerlink" title="shiro 依赖"></a>shiro 依赖</h1><p>非web环境下，仅需要slf4j-api.jar和slf4j的绑定.jars之一。Web配置还需要commons-beanutils-core.jar。可以在需要时添加基于功能的依赖项（Ehcache缓存，基于Quartz的会话验证，Spring依赖项注入等）。</p>]]></content>
      
      
      <categories>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch-aggregations</title>
      <link href="/2019/11/20/elasticsearch-aggregations/"/>
      <url>/2019/11/20/elasticsearch-aggregations/</url>
      
        <content type="html"><![CDATA[<h2 id="指标聚合Metrics-Aggregations"><a href="#指标聚合Metrics-Aggregations" class="headerlink" title="指标聚合Metrics Aggregations"></a>指标聚合Metrics Aggregations</h2><p>指标聚合分为单值聚合和多值聚合。</p><h3 id="单值聚合"><a href="#单值聚合" class="headerlink" title="单值聚合"></a>单值聚合</h3><p>只返回一个指标</p><h4 id="avg-Aggregation"><a href="#avg-Aggregation" class="headerlink" title="avg Aggregation"></a>avg Aggregation</h4><p>求平均值</p><h4 id="Cardinality-Aggregation"><a href="#Cardinality-Aggregation" class="headerlink" title="Cardinality Aggregation"></a>Cardinality Aggregation</h4><p>求基数，统计某个字段有多少个不同值。该值只是近似值，非准确值。可以设置精确阈值大小，以牺牲内存为代价，在该值一下，尽可能的准确。默认值是3000，支持的最大值是40000</p><h4 id="Max-Aggregation"><a href="#Max-Aggregation" class="headerlink" title="Max Aggregation"></a>Max Aggregation</h4><p>统计最大值</p><h4 id="Min-Aggregation"><a href="#Min-Aggregation" class="headerlink" title="Min Aggregation"></a>Min Aggregation</h4><p>统计最小值    </p><h4 id="Sum-Aggregation"><a href="#Sum-Aggregation" class="headerlink" title="Sum Aggregation"></a>Sum Aggregation</h4><p>累加某个数值类型字段的总值。</p><h4 id="Value-Count-Aggregation"><a href="#Value-Count-Aggregation" class="headerlink" title="Value Count Aggregation"></a>Value Count Aggregation</h4><p>对其它聚合文档中提取的value值计数。通常和其它单值聚合器一起使用。例如，当计算平均值时，统计参与计算的平均值的个数</p><h4 id="Top-Hits-Aggregation"><a href="#Top-Hits-Aggregation" class="headerlink" title="Top Hits Aggregation"></a>Top Hits Aggregation</h4><p>热门数据聚合<br>用于子聚合，统计每个bucket分组内的热门数据。</p><ul><li>from - The offset from the first result you want to fetch.</li><li>size - The maximum number of top matching hits to return per bucket. By default the top three matching hits are returned.</li><li>sort - How the top matching hits should be sorted. By default the hits are sorted by the score of the main query.<h3 id="多值聚合"><a href="#多值聚合" class="headerlink" title="多值聚合"></a>多值聚合</h3>返回多个指标<h4 id="stats-Aggregation"><a href="#stats-Aggregation" class="headerlink" title="stats Aggregation"></a>stats Aggregation</h4>统计汇总，基于文档的某个值（可以是特定的数值型字段，也可以通过脚本计算而来），计算出一些统计信息（min、max、sum、count、avg5个值<h4 id="Extended-Stats-Aggregation"><a href="#Extended-Stats-Aggregation" class="headerlink" title="Extended Stats Aggregation"></a>Extended Stats Aggregation</h4>比stats多4个统计结果： 平方和、方差、标准差、平均值加/减两个标准差的区间<h2 id="Bucket-Aggregations桶聚合"><a href="#Bucket-Aggregations桶聚合" class="headerlink" title="Bucket Aggregations桶聚合"></a>Bucket Aggregations桶聚合</h2>将数据分组，每一组就是一个桶，类似与sql的group by 分组。<h3 id="Terms-Aggregation"><a href="#Terms-Aggregation" class="headerlink" title="Terms Aggregation"></a>Terms Aggregation</h3></li></ul><h3 id="Filters-Aggregation"><a href="#Filters-Aggregation" class="headerlink" title="Filters Aggregation"></a>Filters Aggregation</h3><h3 id="Filter-Aggregation"><a href="#Filter-Aggregation" class="headerlink" title="Filter Aggregation"></a>Filter Aggregation</h3><h3 id="Date-Histogram-Aggregation"><a href="#Date-Histogram-Aggregation" class="headerlink" title="Date Histogram Aggregation"></a>Date Histogram Aggregation</h3><h3 id="Histogram-Aggregation"><a href="#Histogram-Aggregation" class="headerlink" title="Histogram Aggregation"></a>Histogram Aggregation</h3><p>常用于直方图统计<br>ps：  如果要返回没有数据的空桶，设置extended_bounds，并且min_doc_count必须为0；</p><h2 id="只返回聚合结果"><a href="#只返回聚合结果" class="headerlink" title="只返回聚合结果"></a>只返回聚合结果</h2><p>只返回聚合结果，不返回search查询结果会使我们的查询更加高效，只要设置查询size为0既可。</p>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8新特性</title>
      <link href="/2019/11/16/java8/"/>
      <url>/2019/11/16/java8/</url>
      
        <content type="html"><![CDATA[<h2 id="stream流式API"><a href="#stream流式API" class="headerlink" title="stream流式API"></a>stream流式API</h2><p>stream 的思想是内部迭代，for-each是外部迭代。<br>流只能使用一次。</p><p><em>stream 优势:</em></p><ul><li>并行 能充分利用多核</li><li>能直观描述数据的操作，代码可读性更高</li></ul><h3 id="创建流的方式"><a href="#创建流的方式" class="headerlink" title="创建流的方式"></a>创建流的方式</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        1、创建stream的方式，通过Collection集合提供的stream或者parallerStream（）</span>        ArrayList<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Object<span class="token operator">></span> stream1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        list.parallelStream();</span><span class="token comment" spellcheck="true">//        2、通过Arrays中的静态方法stram（）获取数组流</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream2 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        3、通过Stream中的静态of方法</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream3 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        4、创建无限流</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream4 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String xx <span class="token operator">=</span> stream3<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="流的中间操作和终端操作"><a href="#流的中间操作和终端操作" class="headerlink" title="流的中间操作和终端操作"></a>流的中间操作和终端操作</h3><p>中间操作：返回另一个流的操作，除非终端操作来临，否则中间操作不会做任何处理。</p><ul><li>filter</li><li>distinct</li><li>skip</li><li>limit</li><li>map</li><li>flatmap</li><li>sorted</li></ul><p>终端操作：从流水线中生成结果的操作。</p><ul><li><p>anyMatch</p></li><li><p>noneMatch</p></li><li><p>allMatch</p></li><li><p>findAny</p></li><li><p>findFirst</p></li><li><p>forEach</p></li><li><p>collect</p></li><li><p>reduce</p></li><li><p>count</p><h3 id="原始类型流"><a href="#原始类型流" class="headerlink" title="原始类型流"></a>原始类型流</h3></li><li><p>DoubleStream<br><code>DoubleStream mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper);</code></p></li><li><p>IntStream<br><code>IntStream mapToInt(ToIntFunction&lt;? super T&gt; mapper);</code></p></li><li><p>LongStream<br><code>LongStream mapToLong(ToLongFunction&lt;? super T&gt; mapper);</code></p><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>lambda表达式可以作为参数传递给方法或者是存储在变量中。<br>优势：简介，可读性好，正因为有了lambda表达式才有了jdk库里stream等流式API。<br>劣势：个人认为目前存在最大的问题就是，由于lambda表达式没有名字，报错简陋，不方便调试。<br><code>ps： 因此，调试起来只能采用打印日志的方式就行调试，stream api 提供了peek方法，可以在元素恢复运行之前插入一段操作。</code></p><h2 id="复合lambda表达式"><a href="#复合lambda表达式" class="headerlink" title="复合lambda表达式"></a>复合lambda表达式</h2><h3 id="比较器复合"><a href="#比较器复合" class="headerlink" title="比较器复合"></a>比较器复合</h3><pre class=" language-java"><code class="language-java">transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Transaction<span class="token operator">:</span><span class="token operator">:</span>getValue<span class="token punctuation">)</span><span class="token punctuation">)</span> 等价于<span class="token comment" spellcheck="true">//transactions.stream().sorted(Comparator.comparing((transaction -> transaction.getValue())))</span></code></pre><p>逆序</p><pre class=" language-java"><code class="language-java">transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Transaction<span class="token operator">:</span><span class="token operator">:</span>getValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>比较器链</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果value一样 则比较year</span>          transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Transaction<span class="token operator">:</span><span class="token operator">:</span>getValue<span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span>Transaction<span class="token operator">:</span><span class="token operator">:</span>getValue<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="谓词复合"><a href="#谓词复合" class="headerlink" title="谓词复合"></a>谓词复合</h3><ul><li>negate() 现有predicate对象的非</li><li>and()</li><li>or ()</li></ul><h3 id="函数复合"><a href="#函数复合" class="headerlink" title="函数复合"></a>函数复合</h3><pre class=" language-java"><code class="language-java">Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> f <span class="token operator">=</span> x <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> g <span class="token operator">=</span> x <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> h <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数学上等价于 g（f(x)）</span><span class="token comment" spellcheck="true">//Function&lt;Integer, Integer> h = f.compose(g);  // 数学上等价于 g（f(x)）</span></code></pre><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>定义：只定义一个抽象方法的接口，即使接口定义了很多默认方法。只要接口只定义了一个抽象方法，它就仍然是一个函数式接口。<br> 常见的函数式接口有：Runnable、Compator、Callable</p><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>定义：方法引用是lambda的快捷写法，以便于提高可读性<br>方法应用分类：<br>1、指向静态方法的方法引用</p><pre class=" language-js"><code class="language-js">    Integer<span class="token punctuation">:</span><span class="token punctuation">:</span>parseInt 等价于 <span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre><p>2、指向实例对象的方法引用 (你在引用一个对象的方法，而这个对象本身是Lambda的一个参数)</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>compareTo<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//等价于 (String str1,String str2)->str1.compareTo(str2);</span></code></pre><p>3、指向外部对象的方法引用 （你在lambda中调用一个已经存在外部对象中的方法）</p><h2 id="其它特殊的方法引用"><a href="#其它特殊的方法引用" class="headerlink" title="其它特殊的方法引用"></a>其它特殊的方法引用</h2><h3 id="构造函数方法引用"><a href="#构造函数方法引用" class="headerlink" title="构造函数方法引用"></a>构造函数方法引用</h3><p>ClassName::new<br><em>无参构造函数方法引用</em></p><pre class=" language-java"><code class="language-java">Supplier<span class="token operator">&lt;</span>Apple<span class="token operator">></span> c1 <span class="token operator">=</span> Apple<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>Apple a1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 等价于：Supplier<span class="token operator">&lt;</span>Apple<span class="token operator">></span> c1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Apple a1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><em>一个参数构造方法引用</em></p><pre class=" language-java"><code class="language-java">Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Apple<span class="token operator">></span> c2 <span class="token operator">=</span> Apple<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>Apple a2 <span class="token operator">=</span> c2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><em>两个参数构造方法引用</em></p><pre class=" language-java"><code class="language-java">BiFunction<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Apple<span class="token operator">></span> c3 <span class="token operator">=</span> Apple<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>Apple c3 <span class="token operator">=</span> c3<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="使用流收集数据"><a href="#使用流收集数据" class="headerlink" title="使用流收集数据"></a>使用流收集数据</h2><h3 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h3><ul><li>filter()  谓词筛选，filter接受一个谓词</li><li>distinct（） 去重</li><li>limit（）截断流</li><li>skip（）跳过流<h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3></li><li>map （对流中的每一个元素应用函数，返回的是Stream<Elements>）</li><li>flatMap 流的扁平化<br>flatMap作用：<br>  <code>&lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper);</code><br>  给定一个函数，flatmap会对原先流中的每个元素apply此函数，得到一个新的值，并将所有的新值放到<strong>一个新的流</strong>中，最后返回该新流即是流的扁平化。<br>  书上的例子是这样的</li></ul><pre class=" language-java"><code class="language-java">                List<span class="token operator">&lt;</span>String<span class="token operator">></span> collect <span class="token operator">=</span>words<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>w <span class="token operator">-</span><span class="token operator">></span> w<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是我最初的想法是，先将每个单词全部转换为大写，然后把每个字符切分成char[]数组，很遗憾的是<br>Steam不能够用char[] 构造，所以间接的用int[]构造流，然后转换为Character[]，最后在将Character[]<br>扁平化到一个流中，然后去重收集起来。</p><pre class=" language-java"><code class="language-java">        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> words <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"China"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Character<span class="token operator">></span> collect <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 这一段代码是为了把char[]流转换为Character[]流,很奇怪，能够根据int[] double[]构造流 却不能根据char[]构造流</span>                    Character<span class="token punctuation">[</span><span class="token punctuation">]</span> characters <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>c <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>Character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> characters<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>chars <span class="token operator">-</span><span class="token operator">></span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><ul><li>anyMatch 检查是否至少有一个匹配</li><li>allMatch 检查是否匹配所有元素</li><li>noneMatch 确保没有任何元素与给定的谓词匹配<h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3></li><li>findAny 返回任意元素</li><li>findFirst 查找第一个元素</li></ul><h3 id="规约"><a href="#规约" class="headerlink" title="规约"></a>规约</h3><p>规约：将流中的元素反复结合起来，得到一个值，这样的查询被归类为规约操作。</p><h4 id="元素求和"><a href="#元素求和" class="headerlink" title="元素求和"></a>元素求和</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 0是初始值 首先， 0作为Lambda（a）的第一个参数，从流中获得4作为第二个参数（b）。</span><span class="token number">0</span> <span class="token operator">+</span><span class="token number">4</span>得到<span class="token number">4</span>，它成了新的累积值。然后再用累积值和流中下一个元素<span class="token number">5</span>调用Lambda，产生新的累积值<span class="token number">9</span>。<span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span></code></pre><h4 id="求最大值最小值"><a href="#求最大值最小值" class="headerlink" title="求最大值最小值"></a>求最大值最小值</h4><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> max <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="收集器collect"><a href="#收集器collect" class="headerlink" title="收集器collect"></a>收集器collect</h3><h4 id="查找最大值最小值"><a href="#查找最大值最小值" class="headerlink" title="查找最大值最小值"></a>查找最大值最小值</h4><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> max <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值:"</span><span class="token operator">+</span>max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最大值:100</span>        Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> min <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>compare<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小值："</span><span class="token operator">+</span>min<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最小值：23</span></code></pre><h4 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h4><pre class=" language-java"><code class="language-java">Integer sum <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">summingInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和："</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总和：300</span></code></pre><h4 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h4><pre class=" language-java"><code class="language-java">Double avg <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">averagingInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均值："</span><span class="token operator">+</span>avg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//平均值：60.0</span></code></pre><h4 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        连接字符串</span>        String joining1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String joining2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>joining1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10055342388</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>joining2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//100,55,34,23,88</span></code></pre><h4 id="Collectors-reducing"><a href="#Collectors-reducing" class="headerlink" title="Collectors.reducing()"></a>Collectors.reducing()</h4><p>上面的收集器都可以用reducing实现，但是可读性降低了。</p><h4 id="收集器转换"><a href="#收集器转换" class="headerlink" title="收集器转换"></a>收集器转换</h4><pre class=" language-java"><code class="language-java"> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> collect <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">collectingAndThen</span><span class="token punctuation">(</span>                Collectors<span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>compareTo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ArrayList<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>假设有一组学生成绩，按照优秀、一般、差进行分组。</p><pre class=" language-java"><code class="language-java">  Map<span class="token operator">&lt;</span>GradeLevel<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> groups <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> GradeLevel<span class="token punctuation">.</span>BAD<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> GradeLevel<span class="token punctuation">.</span>JUST_SO_SO<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> GradeLevel<span class="token punctuation">.</span>GOOD<span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> GradeLevel<span class="token punctuation">.</span>ILGEAL<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>groups<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{BAD=[55, 34, 23], GOOD=[100, 88]}</span></code></pre><h5 id="多级分组"><a href="#多级分组" class="headerlink" title="多级分组"></a>多级分组</h5><p>groupingBy(Function&lt;? super T, ? extends K&gt; classifier, Collector&lt;? super T, A, D&gt; downstream)<br>groupingBy的第二个参数接受Collector类型，因此可以传递分组收集器</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 男女生的成绩进行分组</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>GradeLevel<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Stuent<span class="token operator">>>></span> map <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Stuent<span class="token operator">:</span><span class="token operator">:</span>getSex<span class="token punctuation">,</span> Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> GradeLevel<span class="token punctuation">.</span>BAD<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> GradeLevel<span class="token punctuation">.</span>JUST_SO_SO<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> stu<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> GradeLevel<span class="token punctuation">.</span>GOOD<span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> GradeLevel<span class="token punctuation">.</span>ILGEAL<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><p>分区只是分组的特例而已<br>partitioningBy() 接受一个谓词，返回true 或者false</p><pre class=" language-java"><code class="language-java">   Map<span class="token operator">&lt;</span>Boolean<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Stuent<span class="token operator">>></span> collect <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'女'</span> <span class="token operator">==</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java8新特性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
