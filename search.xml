<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>elasticsearch-aggregations</title>
      <link href="/2019/11/20/elasticsearch-aggregations/"/>
      <url>/2019/11/20/elasticsearch-aggregations/</url>
      
        <content type="html"><![CDATA[<h2 id="指标聚合Metrics-Aggregations"><a href="#指标聚合Metrics-Aggregations" class="headerlink" title="指标聚合Metrics Aggregations"></a>指标聚合Metrics Aggregations</h2><p>指标聚合分为单值聚合和多值聚合。</p><h3 id="单值聚合"><a href="#单值聚合" class="headerlink" title="单值聚合"></a>单值聚合</h3><p>只返回一个指标</p><h4 id="avg-Aggregation"><a href="#avg-Aggregation" class="headerlink" title="avg Aggregation"></a>avg Aggregation</h4><p>求平均值</p><h4 id="Cardinality-Aggregation"><a href="#Cardinality-Aggregation" class="headerlink" title="Cardinality Aggregation"></a>Cardinality Aggregation</h4><p>求基数，统计某个字段有多少个不同值。该值只是近似值，非准确值。可以设置精确阈值大小，以牺牲内存为代价，在该值一下，尽可能的准确。默认值是3000，支持的最大值是40000</p><h4 id="Max-Aggregation"><a href="#Max-Aggregation" class="headerlink" title="Max Aggregation"></a>Max Aggregation</h4><p>统计最大值</p><h4 id="Min-Aggregation"><a href="#Min-Aggregation" class="headerlink" title="Min Aggregation"></a>Min Aggregation</h4><p>统计最小值    </p><h4 id="Sum-Aggregation"><a href="#Sum-Aggregation" class="headerlink" title="Sum Aggregation"></a>Sum Aggregation</h4><p>累加某个数值类型字段的总值。</p><h4 id="Value-Count-Aggregation"><a href="#Value-Count-Aggregation" class="headerlink" title="Value Count Aggregation"></a>Value Count Aggregation</h4><p>对其它聚合文档中提取的value值计数。通常和其它单值聚合器一起使用。例如，当计算平均值时，统计参与计算的平均值的个数</p><h4 id="Top-Hits-Aggregation"><a href="#Top-Hits-Aggregation" class="headerlink" title="Top Hits Aggregation"></a>Top Hits Aggregation</h4><p>热门数据聚合<br>用于子聚合，统计每个bucket分组内的热门数据。</p><ul><li>from - The offset from the first result you want to fetch.</li><li>size - The maximum number of top matching hits to return per bucket. By default the top three matching hits are returned.</li><li>sort - How the top matching hits should be sorted. By default the hits are sorted by the score of the main query.<h3 id="多值聚合"><a href="#多值聚合" class="headerlink" title="多值聚合"></a>多值聚合</h3>返回多个指标<h4 id="stats-Aggregation"><a href="#stats-Aggregation" class="headerlink" title="stats Aggregation"></a>stats Aggregation</h4>统计汇总，基于文档的某个值（可以是特定的数值型字段，也可以通过脚本计算而来），计算出一些统计信息（min、max、sum、count、avg5个值<h4 id="Extended-Stats-Aggregation"><a href="#Extended-Stats-Aggregation" class="headerlink" title="Extended Stats Aggregation"></a>Extended Stats Aggregation</h4>比stats多4个统计结果： 平方和、方差、标准差、平均值加/减两个标准差的区间<h2 id="Bucket-Aggregations桶聚合"><a href="#Bucket-Aggregations桶聚合" class="headerlink" title="Bucket Aggregations桶聚合"></a>Bucket Aggregations桶聚合</h2>将数据分组，每一组就是一个桶，类似与sql的group by 分组。<h3 id="Terms-Aggregation"><a href="#Terms-Aggregation" class="headerlink" title="Terms Aggregation"></a>Terms Aggregation</h3></li></ul><h3 id="Filters-Aggregation"><a href="#Filters-Aggregation" class="headerlink" title="Filters Aggregation"></a>Filters Aggregation</h3><h3 id="Filter-Aggregation"><a href="#Filter-Aggregation" class="headerlink" title="Filter Aggregation"></a>Filter Aggregation</h3><h3 id="Date-Histogram-Aggregation"><a href="#Date-Histogram-Aggregation" class="headerlink" title="Date Histogram Aggregation"></a>Date Histogram Aggregation</h3><h3 id="Histogram-Aggregation"><a href="#Histogram-Aggregation" class="headerlink" title="Histogram Aggregation"></a>Histogram Aggregation</h3><p>常用于直方图统计<br>ps：  如果要返回没有数据的空桶，设置extended_bounds，并且min_doc_count必须为0；</p><h2 id="只返回聚合结果"><a href="#只返回聚合结果" class="headerlink" title="只返回聚合结果"></a>只返回聚合结果</h2><p>只返回聚合结果，不返回search查询结果会使我们的查询更加高效，只要设置查询size为0既可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2019/11/18/test/"/>
      <url>/2019/11/18/test/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>InterviewedPageVO<span class="token operator">>></span> <span class="token function">getInterviewedPages</span> <span class="token punctuation">(</span>ReportParamDTO reportParamDTO<span class="token punctuation">,</span>            String url<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"50"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> pageNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>reportParamDTO<span class="token punctuation">.</span><span class="token function">getStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>null <span class="token operator">||</span> reportParamDTO<span class="token punctuation">.</span><span class="token function">getEndTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            reportParamDTO<span class="token punctuation">.</span><span class="token function">setStartTime</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span>CommonConstants<span class="token punctuation">.</span>DEFAULT_DATE_FORMAT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            reportParamDTO<span class="token punctuation">.</span><span class="token function">setEndTime</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span>CommonConstants<span class="token punctuation">.</span>DEFAULT_DATE_FORMAT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            reportParamDTO<span class="token punctuation">.</span><span class="token function">setTimeCondition</span><span class="token punctuation">(</span><span class="token string">"byDay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>InterviewedPageVO<span class="token operator">></span> interviewedPages <span class="token operator">=</span> pageAnalysisService<span class="token punctuation">.</span><span class="token function">getInterviewedPages</span><span class="token punctuation">(</span>reportParamDTO<span class="token punctuation">,</span>url<span class="token punctuation">,</span>pageSize<span class="token punctuation">,</span> pageNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>interviewedPages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/18/hello-world/"/>
      <url>/2019/11/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java8新特性</title>
      <link href="/2019/11/16/java8/"/>
      <url>/2019/11/16/java8/</url>
      
        <content type="html"><![CDATA[<h2 id="stream流式API"><a href="#stream流式API" class="headerlink" title="stream流式API"></a>stream流式API</h2><p>stream 的思想是内部迭代，for-each是外部迭代。</p><p><em>stream 优势:</em></p><ul><li>并行 能充分利用多核</li><li>能直观描述数据的操作，代码可读性更高</li></ul><h3 id="创建流的方式"><a href="#创建流的方式" class="headerlink" title="创建流的方式"></a>创建流的方式</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        1、创建stream的方式，通过Collection集合提供的stream或者parallerStream（）</span>        ArrayList<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Object<span class="token operator">></span> stream1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        list.parallelStream();</span><span class="token comment" spellcheck="true">//        2、通过Arrays中的静态方法stram（）获取数组流</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream2 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        3、通过Stream中的静态of方法</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream3 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        4、创建无限流</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream4 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String xx <span class="token operator">=</span> stream3<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>lambda表达式可以作为参数传递给方法或者是存储在变量中</p><h2 id="复合lambda表达式"><a href="#复合lambda表达式" class="headerlink" title="复合lambda表达式"></a>复合lambda表达式</h2><h3 id="比较器复合"><a href="#比较器复合" class="headerlink" title="比较器复合"></a>比较器复合</h3><pre class=" language-java"><code class="language-java">  transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Transaction<span class="token operator">:</span><span class="token operator">:</span>getValue<span class="token punctuation">)</span><span class="token punctuation">)</span> 等价于<span class="token comment" spellcheck="true">//transactions.stream().sorted(Comparator.comparing((transaction -> transaction.getValue())))</span></code></pre><p>  逆序</p><pre class=" language-java"><code class="language-java">  transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Transaction<span class="token operator">:</span><span class="token operator">:</span>getValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>  比较器链</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果value一样 则比较year</span>            transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Transaction<span class="token operator">:</span><span class="token operator">:</span>getValue<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span>Transaction<span class="token operator">:</span><span class="token operator">:</span>getValue<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="谓词复合"><a href="#谓词复合" class="headerlink" title="谓词复合"></a>谓词复合</h3><ul><li>negate() 现有predicate对象的非</li><li>and()</li><li>or ()</li></ul><h3 id="函数复合"><a href="#函数复合" class="headerlink" title="函数复合"></a>函数复合</h3><pre class=" language-java"><code class="language-java">Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> f <span class="token operator">=</span> x <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> g <span class="token operator">=</span> x <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> h <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数学上等价于 g（f(x)）</span><span class="token comment" spellcheck="true">//Function&lt;Integer, Integer> h = f.compose(g);  // 数学上等价于 g（f(x)）</span></code></pre><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>定义：只定义一个抽象方法的接口，即使接口定义了很多默认方法。只要接口只定义了一个抽象方法，它就仍然是一个函数式接口。<br> 常见的函数式接口有：Runnable、Compator、Callable</p><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>定义：方法引用是lambda的快捷写法，以便于提高可读性<br>方法应用分类：<br>1、指向静态方法的方法引用</p><pre class=" language-js"><code class="language-js">    Integer<span class="token punctuation">:</span><span class="token punctuation">:</span>parseInt 等价于 <span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre><p>2、指向实例对象的方法引用 (你在引用一个对象的方法，而这个对象本身是Lambda的一个参数)</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>compareTo<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//等价于 (String str1,String str2)->str1.compareTo(str2);</span></code></pre><p>3、指向外部对象的方法引用 （你在lambda中调用一个已经存在外部对象中的方法）</p><h2 id="其它特殊的方法引用"><a href="#其它特殊的方法引用" class="headerlink" title="其它特殊的方法引用"></a>其它特殊的方法引用</h2><h3 id="构造函数方法引用"><a href="#构造函数方法引用" class="headerlink" title="构造函数方法引用"></a>构造函数方法引用</h3><p>ClassName::new<br><em>无参构造函数方法引用</em></p><pre class=" language-java"><code class="language-java">Supplier<span class="token operator">&lt;</span>Apple<span class="token operator">></span> c1 <span class="token operator">=</span> Apple<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>Apple a1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 等价于：Supplier<span class="token operator">&lt;</span>Apple<span class="token operator">></span> c1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Apple a1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><em>一个参数构造方法引用</em></p><pre class=" language-java"><code class="language-java">Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Apple<span class="token operator">></span> c2 <span class="token operator">=</span> Apple<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>Apple a2 <span class="token operator">=</span> c2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><em>两个参数构造方法引用</em></p><pre class=" language-java"><code class="language-java">BiFunction<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Apple<span class="token operator">></span> c3 <span class="token operator">=</span> Apple<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>Apple c3 <span class="token operator">=</span> c3<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="规约"><a href="#规约" class="headerlink" title="规约"></a>规约</h2><p>规约：将流中的元素反复结合起来，得到一个值，这样的查询被归类为规约操作。</p><h3 id="元素求和"><a href="#元素求和" class="headerlink" title="元素求和"></a>元素求和</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 0是初始值 首先， 0作为Lambda（a）的第一个参数，从流中获得4作为第二个参数（b）。</span><span class="token number">0</span> <span class="token operator">+</span><span class="token number">4</span>得到<span class="token number">4</span>，它成了新的累积值。然后再用累积值和流中下一个元素<span class="token number">5</span>调用Lambda，产生新的累积值<span class="token number">9</span>。<span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span></code></pre><h3 id="求最大值最小值"><a href="#求最大值最小值" class="headerlink" title="求最大值最小值"></a>求最大值最小值</h3><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> max <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="使用流收集数据"><a href="#使用流收集数据" class="headerlink" title="使用流收集数据"></a>使用流收集数据</h2><h3 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h3><ul><li>filter()  谓词筛选，filter接受一个谓词</li><li>distinct（） 去重</li><li>limit（）截断流</li><li>skip（）跳过流<h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3></li><li>map （对流中的每一个元素应用函数，返回的是Stream<Elements>）</li><li>flatMap 流的扁平化<br>flatMap作用：<br>  <code>&lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper);</code><br>  给定一个函数，flatmap会对原先流中的每个元素apply此函数，得到一个新的值，并将所有的新值放到<strong>一个新的流</strong>中，最后返回该新流即是流的扁平化。<br>  书上的例子是这样的</li></ul><pre class=" language-java"><code class="language-java">                List<span class="token operator">&lt;</span>String<span class="token operator">></span> collect <span class="token operator">=</span>words<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>w <span class="token operator">-</span><span class="token operator">></span> w<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是我最初的想法是，先将每个单词全部转换为大写，然后把每个字符切分成char[]数组，很遗憾的是<br>Steam不能够用char[] 构造，所以间接的用int[]构造流，然后转换为Character[]，最后在将Character[]<br>扁平化到一个流中，然后去重收集起来。</p><pre class=" language-java"><code class="language-java">        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> words <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"China"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Character<span class="token operator">></span> collect <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 这一段代码是为了把char[]流转换为Character[]流,很奇怪，能够根据int[] double[]构造流 却不能根据char[]构造流</span>                    Character<span class="token punctuation">[</span><span class="token punctuation">]</span> characters <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>c <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>Character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> characters<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>chars <span class="token operator">-</span><span class="token operator">></span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
